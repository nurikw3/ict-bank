import streamlit as st
import requests
import pandas as pd
from datetime import datetime

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_URL = "http://localhost:8000"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Bank App", page_icon="üè¶", layout="wide")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Å—Å–∏–∏
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False
    st.session_state.user_id = None
    st.session_state.username = None

# –°—Ç–∏–ª–∏
st.markdown("""
<style>
    .big-font {
        font-size:30px !important;
        font-weight: bold;
    }
    .success-box {
        padding: 10px;
        background-color: #d4edda;
        border-radius: 5px;
        margin: 10px 0;
    }
    .error-box {
        padding: 10px;
        background-color: #f8d7da;
        border-radius: 5px;
        margin: 10px 0;
    }
</style>
""", unsafe_allow_html=True)

def register_user(username, password, full_name):
    try:
        response = requests.post(f"{API_URL}/register", json={
            "username": username,
            "password": password,
            "full_name": full_name
        })
        return response.json()
    except Exception as e:
        return {"error": str(e)}

def login_user(username, password):
    try:
        response = requests.post(f"{API_URL}/login", json={
            "username": username,
            "password": password
        })
        if response.status_code == 200:
            return response.json()
        else:
            return {"error": response.json().get("detail", "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞")}
    except Exception as e:
        return {"error": str(e)}

def get_accounts(user_id):
    try:
        response = requests.get(f"{API_URL}/accounts/{user_id}")
        return response.json()
    except Exception as e:
        return {"accounts": []}

def get_transactions(account_id):
    try:
        response = requests.get(f"{API_URL}/transactions/{account_id}")
        return response.json()
    except Exception as e:
        return {"transactions": []}

def create_transaction(account_id, trans_type, amount, description):
    try:
        response = requests.post(f"{API_URL}/transaction", json={
            "account_id": account_id,
            "transaction_type": trans_type,
            "amount": amount,
            "description": description
        })
        return response.json()
    except Exception as e:
        return {"error": str(e)}

def transfer_money(from_account, to_account, amount, description):
    try:
        response = requests.post(f"{API_URL}/transfer", json={
            "from_account": from_account,
            "to_account": to_account,
            "amount": amount,
            "description": description
        })
        return response.json()
    except Exception as e:
        return {"error": str(e)}

# –ì–ª–∞–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    if not st.session_state.logged_in:
        # –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞/—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        st.markdown('<p class="big-font">üè¶ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Bank App</p>', unsafe_allow_html=True)
        
        tab1, tab2 = st.tabs(["–í—Ö–æ–¥", "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"])
        
        with tab1:
            st.subheader("–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É")
            login_username = st.text_input("–õ–æ–≥–∏–Ω", key="login_user")
            login_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="login_pass")
            
            if st.button("–í–æ–π—Ç–∏", type="primary"):
                if login_username and login_password:
                    result = login_user(login_username, login_password)
                    if "error" in result:
                        st.error(f"‚ùå {result['error']}")
                    else:
                        st.session_state.logged_in = True
                        st.session_state.user_id = result['user_id']
                        st.session_state.username = result['username']
                        st.rerun()
                else:
                    st.warning("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
        
        with tab2:
            st.subheader("–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
            reg_username = st.text_input("–õ–æ–≥–∏–Ω", key="reg_user")
            reg_password = st.text_input("–ü–∞—Ä–æ–ª—å", type="password", key="reg_pass")
            reg_fullname = st.text_input("–ü–æ–ª–Ω–æ–µ –∏–º—è", key="reg_name")
            
            if st.button("–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", type="primary"):
                if reg_username and reg_password and reg_fullname:
                    result = register_user(reg_username, reg_password, reg_fullname)
                    if "error" in result:
                        st.error(f"‚ùå {result.get('detail', result['error'])}")
                    else:
                        st.success(f"‚úÖ {result['message']}")
                        st.info(f"üìã –í–∞—à –Ω–æ–º–µ—Ä —Å—á–µ—Ç–∞: **{result['account_number']}**")
                        st.balloons()
                else:
                    st.warning("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
    
    else:
        # –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        st.sidebar.markdown(f"### üë§ {st.session_state.username}")
        if st.sidebar.button("üö™ –í—ã–π—Ç–∏"):
            st.session_state.logged_in = False
            st.session_state.user_id = None
            st.session_state.username = None
            st.rerun()
        
        st.title("üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤
        accounts_data = get_accounts(st.session_state.user_id)
        accounts = accounts_data.get('accounts', [])
        
        if not accounts:
            st.warning("–£ –≤–∞—Å –Ω–µ—Ç —Å—á–µ—Ç–æ–≤")
            return
        
        # –í—ã–±–æ—Ä —Å—á–µ—Ç–∞
        selected_account = st.selectbox(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç",
            accounts,
            format_func=lambda x: f"{x['account_number']} - –ë–∞–ª–∞–Ω—Å: {float(x['balance']):.2f} ‚Ç∏"
        )
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("üí∞ –ë–∞–ª–∞–Ω—Å", f"{float(selected_account['balance']):.2f} ‚Ç∏")
        with col2:
            st.metric("üî¢ –ù–æ–º–µ—Ä —Å—á–µ—Ç–∞", selected_account['account_number'])
        with col3:
            st.metric("üìÖ –¢–∏–ø —Å—á–µ—Ç–∞", selected_account['account_type'])
        
        st.divider()
        
        # –û–ø–µ—Ä–∞—Ü–∏–∏
        tab1, tab2, tab3 = st.tabs(["üí≥ –û–ø–µ—Ä–∞—Ü–∏–∏", "üí∏ –ü–µ—Ä–µ–≤–æ–¥", "üìä –ò—Å—Ç–æ—Ä–∏—è"])
        
        with tab1:
            st.subheader("–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∏ —Å–Ω—è—Ç–∏–µ")
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("### –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç")
                deposit_amount = st.number_input("–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", min_value=0.0, step=100.0, key="deposit")
                deposit_desc = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ", key="deposit_desc")
                if st.button("–ü–æ–ø–æ–ª–Ω–∏—Ç—å", type="primary"):
                    if deposit_amount > 0:
                        result = create_transaction(
                            selected_account['id'], 
                            'deposit', 
                            deposit_amount, 
                            deposit_desc
                        )
                        if "error" in result:
                            st.error(f"‚ùå {result['error']}")
                        else:
                            st.success(f"‚úÖ –°—á–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {result['new_balance']:.2f} ‚Ç∏")
                            st.rerun()
                    else:
                        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
            
            with col2:
                st.write("### –°–Ω—è—Ç—å —Å–æ —Å—á–µ—Ç–∞")
                withdraw_amount = st.number_input("–°—É–º–º–∞ —Å–Ω—è—Ç–∏—è", min_value=0.0, step=100.0, key="withdraw")
                withdraw_desc = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ", key="withdraw_desc")
                if st.button("–°–Ω—è—Ç—å", type="primary"):
                    if withdraw_amount > 0:
                        result = create_transaction(
                            selected_account['id'], 
                            'withdrawal', 
                            withdraw_amount, 
                            withdraw_desc
                        )
                        if "error" in result:
                            st.error(f"‚ùå {result.get('detail', result['error'])}")
                        else:
                            st.success(f"‚úÖ –°–Ω—è—Ç–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {result['new_balance']:.2f} ‚Ç∏")
                            st.rerun()
                    else:
                        st.warning("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É")
        
        with tab2:
            st.subheader("–ü–µ—Ä–µ–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤")
            to_account = st.text_input("–ù–æ–º–µ—Ä —Å—á–µ—Ç–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è")
            transfer_amount = st.number_input("–°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞", min_value=0.0, step=100.0)
            transfer_desc = st.text_input("–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞")
            
            if st.button("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏", type="primary"):
                if to_account and transfer_amount > 0:
                    result = transfer_money(
                        selected_account['account_number'],
                        to_account,
                        transfer_amount,
                        transfer_desc
                    )
                    if "error" in result:
                        st.error(f"‚ùå {result.get('detail', result['error'])}")
                    else:
                        st.success(f"‚úÖ {result['message']}")
                        st.balloons()
                        st.rerun()
                else:
                    st.warning("‚ö†Ô∏è –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è")
        
        with tab3:
            st.subheader("–ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")
            trans_data = get_transactions(selected_account['id'])
            transactions = trans_data.get('transactions', [])
            
            if transactions:
                df = pd.DataFrame(transactions)
                df['created_at'] = pd.to_datetime(df['created_at']).dt.strftime('%Y-%m-%d %H:%M')
                df['amount'] = df['amount'].astype(float).round(2)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
                type_map = {
                    'deposit': 'üì• –ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ',
                    'withdrawal': 'üì§ –°–Ω—è—Ç–∏–µ',
                    'transfer_in': '‚¨ÖÔ∏è –í—Ö–æ–¥—è—â–∏–π',
                    'transfer_out': '‚û°Ô∏è –ò—Å—Ö–æ–¥—è—â–∏–π'
                }
                df['transaction_type'] = df['transaction_type'].map(type_map)
                
                st.dataframe(
                    df[['created_at', 'transaction_type', 'amount', 'description']],
                    column_config={
                        "created_at": "–î–∞—Ç–∞",
                        "transaction_type": "–¢–∏–ø",
                        "amount": st.column_config.NumberColumn("–°—É–º–º–∞ (‚Ç∏)", format="%.2f"),
                        "description": "–û–ø–∏—Å–∞–Ω–∏–µ"
                    },
                    hide_index=True,
                    use_container_width=True
                )
            else:
                st.info("üì≠ –ù–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

if __name__ == "__main__":
    main()